{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["onPerfEntry","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","songTitle","setSongTitle","_React$useState3","_React$useState4","artist","setArtist","_React$useState5","_React$useState6","lyrics","setLyrics","_React$useState7","_React$useState8","loading","setLoading","_React$useState9","_React$useState10","previousInput","setPreviousInput","fetchLyrics","useCallback","asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","axios","get","concat","sent","replace","t0","stop","react_default","a","createElement","className","style","marginTop","Container","onSubmit","event","preventDefault","Grid","container","spacing","direction","justifyContent","alignItems","item","TextField","disabled","required","id","label","placeholder","value","onChange","target","Button","variant","color","type","title","marginBottom","whiteSpace","CircularProgress","ReactDOM","createRoot","document","getElementById","render","StrictMode","App_App","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.da40ed9c.chunk.js","sourcesContent":["import Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Container from '@mui/system/Container';\nimport React from 'react';\nimport './App.css';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport axios from 'axios';\n\ntype Lyrics = { loading: boolean; lyrics: string | undefined };\ntype APIParams = { artist: string; songTitle: string };\n\nconst cleanLyrics = (dirtyLyrics: string) => {\n  return dirtyLyrics.replace(/\\n\\n/g, '\\n');\n};\n\nexport const App = () => {\n  const [songTitle, setSongTitle] = React.useState<string>('');\n  const [artist, setArtist] = React.useState<string>('');\n  const [lyrics, setLyrics] = React.useState<string>();\n  const [loading, setLoading] = React.useState(false);\n  const [previousInput, setPreviousInput] = React.useState<APIParams>();\n\n  const fetchLyrics = React.useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await axios.get(`https://api.lyrics.ovh/v1/${artist}/${songTitle}`);\n      setLyrics(cleanLyrics(data.data.lyrics));\n      setLoading(false);\n    } catch (e) {\n      setLyrics('You probably spelled something wrong because ur bad');\n      setLoading(false);\n    }\n  }, [artist, songTitle]);\n\n  const handleSearch = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!previousInput || previousInput.artist !== artist || previousInput.songTitle !== songTitle) {\n      fetchLyrics();\n      setPreviousInput({ artist, songTitle });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{ marginTop: '10%' }}>\n        <Container>\n          <form onSubmit={handleSearch}>\n            <Grid container={true} spacing={2} direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n              <Grid item={true}>\n                <TextField\n                  disabled={loading}\n                  required={true}\n                  id=\"outlined-required\"\n                  label=\"Artist name\"\n                  placeholder=\"Artist name\"\n                  value={artist}\n                  onChange={(event) => setArtist(event.target.value)}\n                />\n              </Grid>\n              <Grid item={true}>\n                <TextField\n                  disabled={loading}\n                  required={true}\n                  id=\"outlined-required\"\n                  label=\"Song title\"\n                  placeholder=\"Song title\"\n                  value={songTitle}\n                  onChange={(event) => setSongTitle(event.target.value)}\n                />\n              </Grid>\n              <Grid item={true}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  disabled={!songTitle || !artist}\n                  title=\"Search\"\n                >\n                  Search\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n          {lyrics && (\n            <div style={{ marginTop: '10%', marginBottom: '10%' }}>\n              <div style={{ whiteSpace: 'pre-line' }}>{loading ? <CircularProgress /> : lyrics}</div>\n            </div>\n          )}\n        </Container>\n      </div>\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}